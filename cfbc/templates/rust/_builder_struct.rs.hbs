#[repr(C, align(8))]
#[derive(Default, Clone, Debug, PartialEq)]
pub struct Vec3 {
    pub x: u64,
    pub y: u8,
    pub padding0_: u8,
    pub padding1_: u16,
    pub padding2_: u32,
    pub z: u64,
}

impl Vec3 {
    pub fn is_present(&self) -> bool {
        self.x != 0 || self.y != 0 || self.z != 0
    }
}

impl PushScalarInto for Vec3 {
    #[cfg(target_endian = "little")]
    fn push_into(self, builder: &mut Builder) {
        builder.push_direct(&self)
    }

    #[cfg(not(target_endian = "little"))]
    fn push_into(self, builder: &mut Builder) {
        builder.push_scalar(self.x);
        builder.push_scalar(self.y);
        builder.push_scalar(self.padding0_);
        builder.push_scalar(self.padding1_);
        builder.push_scalar(self.padding2_);
        builder.push_scalar(self.z);
    }
}
