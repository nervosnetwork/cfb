// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

pub enum AccountOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Account<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Account<'a> {
    type Inner = Account<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Account<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Account { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args AccountArgs,
    ) -> flatbuffers::WIPOffset<Account<'bldr>> {
        let mut builder = AccountBuilder::new(_fbb);
        builder.add_balance(args.balance);
        builder.add_year(args.year);
        builder.finish()
    }

    pub const VT_YEAR: flatbuffers::VOffsetT = 4;
    pub const VT_BALANCE: flatbuffers::VOffsetT = 6;

    #[inline]
    pub fn year(&self) -> u32 {
        self._tab.get::<u32>(Account::VT_YEAR, Some(0)).unwrap()
    }
    #[inline]
    pub fn balance(&self) -> u64 {
        self._tab.get::<u64>(Account::VT_BALANCE, Some(0)).unwrap()
    }
}

pub struct AccountArgs {
    pub year: u32,
    pub balance: u64,
}
impl<'a> Default for AccountArgs {
    #[inline]
    fn default() -> Self {
        AccountArgs {
            year: 0,
            balance: 0,
        }
    }
}
pub struct AccountBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AccountBuilder<'a, 'b> {
    #[inline]
    pub fn add_year(&mut self, year: u32) {
        self.fbb_.push_slot::<u32>(Account::VT_YEAR, year, 0);
    }
    #[inline]
    pub fn add_balance(&mut self, balance: u64) {
        self.fbb_.push_slot::<u64>(Account::VT_BALANCE, balance, 0);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AccountBuilder<'a, 'b> {
        let start = _fbb.start_table();
        AccountBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Account<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}
