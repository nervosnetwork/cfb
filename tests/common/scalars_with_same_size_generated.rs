// automatically generated by the FlatBuffers compiler, do not modify


pub mod example {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

pub enum PointOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Point<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Point<'a> {
    type Inner = Point<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Point<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Point {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args PointArgs) -> flatbuffers::WIPOffset<Point<'bldr>> {
      let mut builder = PointBuilder::new(_fbb);
      builder.add_y(args.y);
      builder.add_x(args.x);
      builder.finish()
    }

    pub const VT_X: flatbuffers::VOffsetT = 4;
    pub const VT_Y: flatbuffers::VOffsetT = 6;

  #[inline]
  pub fn x(&self) -> u32 {
    self._tab.get::<u32>(Point::VT_X, Some(0)).unwrap()
  }
  #[inline]
  pub fn y(&self) -> u32 {
    self._tab.get::<u32>(Point::VT_Y, Some(0)).unwrap()
  }
}

pub struct PointArgs {
    pub x: u32,
    pub y: u32,
}
impl<'a> Default for PointArgs {
    #[inline]
    fn default() -> Self {
        PointArgs {
            x: 0,
            y: 0,
        }
    }
}
pub struct PointBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> PointBuilder<'a, 'b> {
  #[inline]
  pub fn add_x(&mut self, x: u32) {
    self.fbb_.push_slot::<u32>(Point::VT_X, x, 0);
  }
  #[inline]
  pub fn add_y(&mut self, y: u32) {
    self.fbb_.push_slot::<u32>(Point::VT_Y, y, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PointBuilder<'a, 'b> {
    let start = _fbb.start_table();
    PointBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Point<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod example

